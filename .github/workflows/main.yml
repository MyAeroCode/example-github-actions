#
# 워크플로우의 이름입니다.
name: Hello_CI

#
# 워크플로우가 트리거될 조건을 설정합니다.
# master에 push 또는 pull_request가 발생할 경우에 실행됩니다.
on:
    push:
        branches: [master]
    pull_request:
        branches: [master]

#
# 워크플로우가 실행할 작업들을 1개 이상 정의합니다.
# 기본적으로는 병렬로 실행되지만, needs 특성으로 인해 작업간에 선행관계가 주어진 경우 순행적으로 실행됩니다.
jobs:
    #
    # build_and_test을 이름으로 갖는 작업을 정의합니다.
    build_and_test:
        #
        # 우분투 운영체제에서 가상기계를 실행합니다.
        # "우분투 가상기계"를 실행하는 것이 아니라,
        # "우분투" 위에서 "가상기계"를 실행하는 것 입니다.
        runs-on: ubuntu-latest

        #
        # 작업을 실행할 테스트 환경을 설정합니다.
        # 4개의 운영체제에서 각각 3개의 노드 버전으로 테스트 환경을 설정했으므로,
        # 총 12개의 테스트 환경에서 작업을 수행합니다.
        strategy:
            matrix:
                node-version: [8.x, 10.x, 12.x]
                container:
                    [
                        "ubuntu-latest",
                        "centos-latest",
                        "windows-latest",
                        "macos-latest",
                    ]

        #
        # 작업의 구체적인 명령어를 여기에 기술합니다.
        steps:
            #
            # 타인이 공개한 Action을 사용할 수 있습니다.
            # actions/checout에서 @v2 브런치의 액션을 사용합니다.
            # 이 액션은 타입스크립트 프로젝트의 루트(`$GITHUB_WORKSPACE`)로 이동합니다.
            - uses: actions/checkout@v2

            #
            # 자신이 직접 명령어를 명세할 수 있습니다.
            - name: Install dependencies.
              run: |
                  npm ci
                  npm install

            - name: Execute test.
              run: npm test

    #
    # alert_to_slack을 이름으로 갖는 작업을 생성합니다.
    alert:
        runs-on: ubuntu-latest

        #
        # push로 발생한 경우에만 해당 작업을 실행합니다.
        # 즉, pull_request로 발생했다면 아래 작업은 실행되지 않습니다.
        if: github.event_name == 'push'

        #
        # build_and_test가 성공한 뒤에 실행됩니다.
        needs: build_and_test

        steps:
            - uses: 8398a7/action-slack@v3
              with:
                  status: custom
                  fields: workflow,job,commit,repo,ref,author,took
                  custom_payload: |
                      {
                          username: 'action-slack',
                          icon_emoji: ':robot_face:',
                          attachments: [{
                              color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                              text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@master by ${process.env.AS_AUTHOR} succeeded in ${process.env.AS_TOOK}`,
                          }]
                      }

              #
              # 레포지터리에 secrets으로 설정된 키-값을
              # secrets.xxx 형식으로 가져올 수 있습니다.
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
